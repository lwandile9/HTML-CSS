# HTML and CSS intro Notes

# Html:
 *it is simple and gives resilience and robustness If something goes wrong it will try and guess and fix it.*
•	No programming logic, loops or functions
•	It is a declarative language. 
•	
# CSS:   
it is fragile yet powerful. when the browser encounters a bug, I will skip that part and move on to the rest of the code. Browsers does its best to make it work.

JavaScript: JavaScript is delicate if something goes wrong it like, bug in a code, outdated browser and does not understand the code, it will stop working not even trying to figure out the code or what to do

To make the web accessible regardless of the computer type and or viewer used, created using  3 languages, CSS , HTML, and JavaScript …. By combining these languages, developers can achieve resilience, robustness, and power of their website.


# HTML basics- HTML consists of tree-like elements called Dom and the browser uses this to understand the structure of the web page better.   Example: 

 <article >------     parent 
# Nested element# 
<p>This is a paragraph inside an article</p> ……. Child 
  </article>
# Html elements#
I – we use italics to emphasize a text or  to distinguish a certain text visually or by browser from other text.
b- to simply make the text bold (generic element)
i and b, do not carry any specific meaning and are used solely for visual styling.
All oThe above elements are all inline elements only taking up the necessary space. 
em- to emphasize the text.
Strong- used to show importance, seriousness, or urgency.
Quotes Element:  
<cite> and <blockquote> they inform computers and screen readers about the quote, and they make it easy to style them differently.
We can also use <q> to make the browser recognize a quote 
HTML Date and Time Inputs
HTML has a  <time> element. This element is used to mark anything that specifies a time of day, a date, or a duration.
Date Time: <time datetime=””2024-08-05” > </time> ---- This makes it easy for the computer  to understand the format of date and the date itself.

# HTML <pre> an <br>#

<br>- this is a line break in HTML , when a browsers see this it will go to a new line
<pre> This is used to tell the browser to preserve formatting
<code> is used to output the code on the browser without any miss use 
HTML entity- this a are special chars combination that will represent a  a letter or  symbol that cannot be written normally in html 

# Html Subscript, SmallText, Superscript;

We used text formatting elements like small to represent a formula in html or any advanced formatted text.
Super- is used to raise the char up 
Sub – is used to lower  the char down
And small- is use to  make char smaller

HTML Attributes: HTML add additional functionalities and improves elements' capabilities 
The most used attributes are: ID and Classes  and the class is the most commonly used  because it always elements to  have the same class name . but ID are meant to be unique identifiers.

HTML offers many attributes that enhance user interaction and provide hooks into browser power. These attributes, such as "content editable," allow interaction with the screen, keyboard, and assistive devices. They facilitate the editing capability within the browser.
There are numerous attributes like this, which provide browser APIs to JavaScript. To explore more, you can check out other courses. Additionally, the "lang" attribute allows us to specify the language of the content using a short language code. We will delve deeper into supporting languages on the web and finding these codes in chapter seven: Content Identification. The "dir" attribute explicitly indicates the direction in which the text flows, using "LTR" for left-to-right scripts and "RTL" for right-to-left scripts. These attributes, "lang" and "dir," are considered Global Attributes and can be used on any HTML element.


ARIA Roles:  These are the attributes that help screen reader to better understand the   content of the web page and also help disabled  people to be able to access  the web with ease. ARIA is a powerful tool that greatly enhances web accessibility ARIA Roles provide the necessary tools to make sites accessible to everyone.


# Formatting HTML: 

# HTML Navigation and linking
-	Links helps us to navigate the web, internally or externally. 
-	To create a link you use anchor tags <a></a> and insert attributes such as  href – where the link will if it is clicked and insert the a tags you place a  text that you want the users to see. 
-	By default, the A element is inline and can be placed within a paragraph or any other text. 
Types of linking are 
absolute URL -  this is a full url linking to a specific page or content including http
and relative URL – which is a url that is used to link to internal files within your website or sever.  




# Working with Images
To include the image in your website you use the image tag  <image>  and this tag is a self-closing tag . All images tag require some attributes to work properly                                               
src: this is the path to the image to be displayed.
Alt: this is the text that will be displayed if the image is not found. It also help screen reader. If we omit this  attributes  file name will be read aloud.
Width: to set the widens of the image, this can be done using CSS externally. 
Height: to set how tall the image should be, this can also be done using CSS externally. 
The  width and height attributes,  determine the size of the image. So, every image should have all four of these attributes.

# There are four main file formats commonly used on the web these days, each with its own strengths and weaknesses when it comes to compressing images. :

GIF: GIFs are great for compressing illustrations that have large areas of the same color, but it falls short when it comes to photographs. It only supports 256 colors, and images can end up looking pixelated, unless you want that retro vibe. GIFs can have transparent areas, but the edges between transparent and solid parts can be jagged.
SVG: SVGs are perfect for logos, icons, and other types of illustrations. Unlike GIF, SVG is a vector file that contains instructions for drawing rather than individual pixels. This means it can be scaled to any size without losing quality, and the file size remains small. SVG is actually a programming language for graphics, and there are dedicated courses on it if you wish to learn more. SVG files can be exported from programs like Illustrator or Sketch and handled just like other file formats on the web.
JPG: JPGs are a popular choice for compressing photographs. Most digital cameras save images in JPG format, but when placed on the web, it is important to resize and compress them appropriately. Avoid using gigantic, half-compressed JPGs on your websites as they will slow the loading speed. JPGs can be compressed further by reducing colour information, finding the right balance between quality and file size. You can do this manually or rely on web services for assistance.
PNG:  PNG is a newer format that works well when you need transparency in a photograph. It sometimes outperforms both GIF and JPG in compressing certain types of images. When manually compressing files, try different options to find the smallest file size. It is worth mentioning that new image formats will likely emerge in the future, offering even better compression capabilities. Keep an eye out for those. When working with image files, consider the physical size, file format, and compression settings to ensure fast download speeds. Interestingly, the HTML used remains the same regardless of the file format you choose.
Handling responsiveness of the images: Images must be displayed in different screen size in a good quality or in way that suit the user. Way of ensuring responsiveness of the images.

1.	Providing the browser with different image sizes to let the browser choose the best appropriate image. 
2.	Ensure you use the best file format for responsiveness! 


To start off, use the image element with its ALT text and a URL to the image file. This ensures that even outdated browsers like Internet Explorer 11 can display the image. Now, wrap this image element with the picture element. This acts as a wrapper for the whole setup. Within the picture element, list alternative options using the source element. In this instance, provide two options by creating two source elements.


# Working with forms <form> </form>

Forms are important inputs to the webpage. They make sure that html is accessibly to most devices even those we don’t know off.  
Basic structure of form is like this. 

<form method=” get/post” action=”./file that will process the input”>
<label>
<label>
<input type=”text”>


<form>

It is important to use semantic form elements in HTML instead of divs and spans because it allows us to leverage the built-in power of the browser. This way, we avoid wasting time and effort trying to recreate functionalities that already exist in the browser. Moreover, by using HTML form elements, we ensure that forms will be compatible with all devices and input/output hardware, even those we may not be familiar with. 


To create a form, we start with the form element, which informs the browser about the presence of a form using opening and closing tags. In the newsletter signup form, there will be two fields: name and email. These field names can be turned into labels using the label element. 
Use the input element to provide places for users to input their name and email. Unlike other elements, the input element does not have a closing tag due to its older structure. It acts as a marker for the browser to bring in functionality and place it there. This is where the form's magic happens. 
Now, a button is needed for users to submit the form. Use the button element for this. The text on the button can be customized to whatever is required. Although the form looks good visually, it currently lacks functionality. To make it work, we need to connect it to a backend. We can add an action and method attribute to make a demo work, although using the "get" method is not secure and is not recommended for real websites.
Once set up, land on the response page, but the data that was entered does not appear. This is because the input fields need a "name" attribute to report the data. Add "name=name" to the first input element and "name=email" to the second. The name attribute can be customized as desired. After making these changes, the form works successfully, but only if you interact with it using a screen and a mouse. 
To make it accessible to everyone, we need to address the issue of the label and input elements not being connected. There are two options to achieve this. 
1.	Add a "for" attribute to the label that matches the "id" attribute of the input. 
2.	Wrap the input with the label. 
Both methods work, and it is a matter of choosing the desired markup structure. You can test the connection by clicking on the label and ensuring that the focus jumps to the corresponding input. This is crucial for accessibility, as many people rely on this connection. Clicking on the label is a quick way to verify its functionality.


# Working with tables:
Table Structure:

Start with the <table> element and close it at the end.
Use the <tr> element to define each row.
Inside each row, use the <td> element for table data cells, and <th> for header cells.
Table Example:

Header Row: Contains column headers wrapped in <th>. Example headers: Bird, Color, Diet, Photo.
Data Rows: Each row contains four cells wrapped in <td>. Example cell content: American goldfinch, yellow, eats mostly seeds, and an image.
HTML Markup Example:

html
Copy code
<table>
  <tr>
    <th>Bird</th>
    <th>Color</th>
    <th>Diet</th>
    <th>Photo</th>
  </tr>
  <tr>
    <td>American goldfinch</td>
    <td>Yellow</td>
    <td>Eats mostly seeds</td>
    <td><img src="goldfinch.jpg" alt="American goldfinch"></td>
  </tr>
  <!-- Additional rows here -->
</table>
Styling with CSS:

Header Styling: Apply CSS to change the appearance of header text (e.g., text-transform to capitalize).
Table Styling: Use CSS to adjust table borders, spacing, and overall appearance to enhance the default browser styling.
Advanced Features:

Span content across multiple rows or columns.
Define table sections such as header, body, and footer.
Add captions to provide additional context.
Key Elements
<table>: Container for the entire table.
<tr>: Table row.
<th>: Table header cell.
<td>: Table data cell.
By understanding these basics, you can start creating well-structured and styled tables for your web projects.

Where can you find the authoritative standard for HTML?

The Living Standard





CSS

what is CSS: cascading style sheet.

css is the  tool used to style our pages.  it's like if we building   a house that we want to sell for profit using blocks only and the house's,
that house will look ugly and will not attract any  buyers. to make it stand out we would use a paint to style it the way we want to that it looks good.

css is like a paint  and html is like a cement and blocks that you use to build a house.

A hex value may contain _____

Answer: Numbers from zero to nine and letters from a-f.

Canva offers a color called "scarlet." However, this CSS doesn't work. Why? h3 { color: scarlet; }

Answer: Only CSS-named colors work directly inside of CSS. Scarlet is not a CSS-named color.



#Understanding the Box Model in CSS

In web development, every HTML element is like a box with different properties. These properties are always present, even if their value is zero and not visible. Let's break down how these properties work. First, we have the content, which is the text inside the box. Then, there is the border, which is like a line surrounding the content. We can choose to display all four sides of the border or just a few. And there are various styles available for the border. 

Next, we have the padding, which is the space between the border and the content. It can also have its own background color. When we add padding, we are essentially pushing the edge of the box away from the content. 

Outside the border, there is the margin, which represents the space between elements on the page. If you want to separate intersecting elements, adding some margin will do the trick. 

We can assign properties to individual sides or apply them to all four sides at once. There are shorthand values available for border, padding, and margin, which provide a more concise way to set these properties. Only a few examples have been provided here, but there is more to explore on this topic.




1. Introduction to HTML:
Overview: HTML (HyperText Markup Language) is the backbone of web development. Understanding its structure and syntax is key to creating and maintaining web pages.
Key Concepts:
Document Structure: The basic structure of an HTML document, including <!DOCTYPE>, <html>, <head>, and <body> tags.
Importance: These elements ensure proper formatting, accessibility, and SEO optimization.
2. Common HTML Tags:
Overview: Familiarity with common HTML tags is essential for organizing and presenting content.
Key Concepts:
Headings (<h1> to <h6>): Used to define titles and subtitles, enhancing the document's structure and readability.
Paragraphs (<p>): Allows you to create blocks of text, making content more digestible.
Links (<a>): Enables navigation between web pages, crucial for a functional web experience.
Images (<img>): Embeds visual content, enriching the user interface.
3. Creating Lists:
Overview: Lists are useful for displaying items in a structured format, whether order matters or not.
Key Concepts:
Unordered Lists (<ul>): Displayed with bullet points, ideal for listing items where order is irrelevant.
Ordered Lists (<ol>): Numbered lists for items where sequence matters.
Nested Lists: Multi-level lists for complex data representation.
4. Forms and Input Elements:
Overview: Forms are critical for interacting with users, allowing them to submit data that can be processed by a server.
Key Concepts:
Form Structure: Understanding the <form> element, action, and method attributes to manage data submission.
Input Elements:
Text, Password, Email Inputs: Collect user information securely and efficiently.
Checkboxes and Radio Buttons: Allow users to make selections from a set of options.
Dropdown Lists (<select>): Present options in a compact form.
Textareas (<textarea>): Enable users to provide longer text inputs.
Submit Buttons: Trigger form submission and initiate data processing.
Conclusion:
By mastering these fundamental HTML concepts, you are equipped to create functional, well-structured web pages that are the cornerstone of modern web development. The knowledge gained forms a strong foundation for further study in web design and development, including CSS for styling and JavaScript for interactivity.

Further Learning Resources:
To continue building on the knowledge gained in this course, you are encouraged to explore the following resources:

W3Schools - HTML Reference
Mozilla Developer Network (MDN) - HTML Documentation
FreeCodeCamp - HTML Tutorials
These resources offer in-depth tutorials, documentation, and hands-on exercises to help solidify your understanding of HTML and advance your web development skills.


 
